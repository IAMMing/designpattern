外观模式
外观模式的主要思想是将复杂的细粒度的对象服务包装成简单的易使用的粗粒度的功能服务，我们大家最容易理解和知道的外观模式就是，使用的API接口的封装，我们将第三方的API接口引入到我们的项目中的时候，我们需要对这些接口进行包装，将细粒度的具体调用过程进行包装成外观类的形式，通过外观类来进行统一的调用。

外观模式的主要优点如下：
(1) 它对客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目，并使得子系统使用起来更加容易。通过引入外观模式，客户端代码将变得很简单，与之关联的对象也很少。
(2) 它实现了子系统与客户端之间的松耦合关系，这使得子系统的变化不会影响到调用它的客户端，只需要调整外观类即可。
(3) 一个子系统的修改对其他子系统没有任何影响，而且子系统内部变化也不会影响到外观对象。

外观模式的主要缺点如下：
(1) 不能很好地限制客户端直接使用子系统类，如果对客户端访问子系统类做太多的限制则减少了可变性和灵活 性。
(2) 如果设计不当，增加新的子系统可能需要修改外观类的源代码，违背了开闭原则。

效果及实现要点
1、Facade模式对客户屏蔽了子系统组件，因而减少了客户处理的对象的数目并使得子系统使用起来更加方便。
2、Facade模式实现了子系统与客户之间的松耦合关系，而子系统内部的功能组件往往是紧耦合的。松耦合关系使得子系统的组件变化不会影响到它的客户。
3、如果应用需要，它并不限制它们使用子系统类。因此你可以在系统易用性与通用性之间选择。

适用性
1、为一个复杂子系统提供一个简单接口。
2、提高子系统的独立性。
3、在层次化结构中，可以使用Facade模式定义系统中每一层的入口。

总结
Facade模式注重的是简化接口，它更多的时候是从架构的层次去看整个系统，而并非单个类的层次。


http://kb.cnblogs.com/page/84141/
http://blog.csdn.net/lovelion/article/details/8259789